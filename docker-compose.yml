version: '3'

volumes:
  db-data:
  pgadmin-data:
  ml-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/volumes/ml-data'
  jupyter-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/volumes/jupyter-data'
  geodata:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/volumes/geodata'

services:
  jupyter:
    container_name: jupyter
    build:
      context: ./
      dockerfile: ./dockerfiles/jupyter
    restart: always
    environment: 
      MLFLOW_TRACKING_URI: 'http://mlflow:5000'
      JUPYTER_ENABLE_LAB: "yes"
      # GRANT_SUDO: "yes"
    ports:
      - ${JUPYTER_PORT}:8888
    volumes: 
      - jupyter-data:/home/jovyan/work
    depends_on: 
      # - mlflow
      - db
    secrets:
      - source: jp-config
        target: /nb.cfg
        mode: 0600
      - source: nb-readme
        target: /home/jovyan/readme.ipynb
        mode: 0644
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"
    healthcheck:
      test: "exit 0"
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s

  mlflow:
    container_name: mlflow
    build:
      context: ./
      dockerfile: ./dockerfiles/mlflow
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${MLFLOW_PORT}:5000
    volumes: 
      - ml-data:/mlflow
    depends_on: 
      - db
    command: >
        /wait-for-it.sh db:5432 -s -- mlflow server
        --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mlflow
        --default-artifact-root /mlflow --host 0.0.0.0
    healthcheck:
      test: "exit 0"
      interval: 5m0s
      timeout: 30s
      retries: 3
      start_period: 1m

  db:
    container_name: db
    build:
      context: ./
      dockerfile: ./dockerfiles/db
    restart: always
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGDATA: /var/lib/postgresql/data
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DBUNM: ${POSTGRES_USER}
      DBUPW: ${POSTGRES_PASSWORD}
      NBUNM: ${NOTEBOOK_USER}
      NBUPW: ${NOTEBOOK_PASSWORD}
      PGPASSWORD: ${MASTER_PG_PASS}
      POSTGRES_PASSWORD: ${MASTER_PG_PASS}
    secrets:
      - source: db-conf
        target: /etc/postgresql/postgresql.conf
        mode: 0600
      - source: db-hba
        target: /etc/postgresql/pg_hba.conf
        mode: 0600
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - db-data:/var/lib/postgresql/data
    command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        - -c
        - hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    container_name: pgadmin
    image: docker.io/dpage/pgadmin4:7.3
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASS}
      - PGADMIN_LISTEN_PORT=8080
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
      # disable password resets
      - PGADMIN_DISABLE_POSTFIX=TRUE
    secrets:
      - source: dba-servers
        target: /pgadmin4/servers.json
        # mode: 0600
        mode: 0777
      - source: dba-pgpass
        target: /pgadmin4/pgpass
        # mode: 0600
        mode: 0777
    entrypoint: >
      /bin/sh -c "mkdir -p /var/lib/pgadmin/storage/pgadmin_local.host;
      cp /pgadmin4/pgpass /var/lib/pgadmin/storage/pgadmin_local.host/pgpass;
      /entrypoint.sh
      "
    ports:
      - ${PGADMIN_PORT}:8080
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db
    healthcheck:
      test: "exit 0"
      interval: 2m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  geo2db:
    container_name: geo2db
    build:
      context: ./
      dockerfile: ./dockerfiles/geo2db
    restart: unless-stopped
    environment:
      POSTGRES_DB: dbdata
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes: 
      - geodata:/data
    depends_on: 
      - db

secrets:
  jp-config:
    file: ./config/jupyter-config-cred
  nb-readme:
    file: ./docs/readme.ipynb
  db-conf:
    file: ./config/postgresql.conf
  db-hba:
    file: ./config/pg_hba.conf
  dba-servers:
    file: ./config/pgadmin-config-servers
  dba-pgpass:
    file: ./config/pgadmin-config-cred
